# TextMate tutorial: http://manual.macromates.com/en/language_grammars

# Regex to convert keys to unquoted: '(include|match|captures|begin|end|beginCaptures|endCaptures|name|patterns|0|1|2|3|4|5|6|7|8|9|comment|fileTypes|scopeName|repository|contentName|firstLineMatch|foldingStartMarker|foldingStopMarker)':

scopeName: 'source.ngspice' # <scope> should be a short, unique indicator for the language ("js", "php", "c", etc.)
name: 'ngspice' # The title that will show up in grammar selection and on your status bar.
fileTypes: [ # An array of file extensions.
  'cir'
  'net'
]

patterns: [
  {include: '#comment'}
  {include: '#control_block'}
  {include: '#directive'}
  {include: '#continue_line'}
  {include: '#recursive'}
]

repository:
  recursive:
    patterns: [
      {include: '#strings'}
      {include: '#space'}
#      {include: '#function'}
      {include: '#voltage'}
      {include: '#special_variables'}
      {include: '#ngspice_name'}
      {include: '#constant'}
      {include: '#end_of_line_comment'}
   ]
  seperator:
    match: '([ ,=])([^ ,=]+)'
    captures:
      1: name : 'punctuation.space.ngspice'
      2: patterns: [{include: '#recursive'}]
  space:
    match: '(\\s+)(.+)'
    name: 'meta.space.ngspice'
    captures:
      1: name: 'punctuation.space.ngspice'
      2: patterns: [{ include: '#recursive' }]
  special_variables:
    match: '(?:time)|(?:temper)|(?:hertz):(?:Time)|(?:Temper)|(?:Hertz):(?:TIME)|(?:TEMPER)|(?:HERTZ)'
    name: 'variable.language.ngspice'
  ngspice_name:
    match: '[A-Za-z][()]*'
    name: 'name.ngspice'
  functions:
    match: '([A-Za-z][A-Za-z0-9_]*)(\\()(.*)'
    captures:
      1: name: 'entity.name.function.ngspice'
      2: name: 'punctuation.leftpar.ngspice'
      3: patterns: [{ include: '#recursive' }]
  constant:
    match: '(?<![a-zA-Z_])((?:[0-9]+(?:[.][0-9]*)?|[.][0-9]+)(?:[eE][-+]?[0-9]+)?)(k|K|meg|MEG|Meg|mil|MIL|Mil|g|G|t|T|m|M|u|U|Î¼|n|N|p|P|f|F){0,1}([a-z,A-Z,0-9]*)'
    name: 'meta.numeric.ngspice'
    captures:
      1: name: 'constant.numeric.ngspice'
      2: name: 'constant.numeric.ngspice'
      3: name: ''
  comment:
    match: '^\\*.*$'
    name: 'comment.line.ngspice'
  end_of_line_comment:
    match: '\\$.*$'
    name: 'comment.line.end_of_line.ngspice'
  directive:
    match: '^(\\.)(\\S+)'
    name: 'entity.directive.ngspice'
    captures:
      1: name: 'entity.punctuation.dot.ngspice'
      2: name: 'keyword.ngspice'
  strings:
    patterns: [
      {
        match: '(.*)(\')([^\']*)(\')(.*)'
        captures:
          1: patterns: [{ include: '#recursive' }]
          2: name:'punctuation.definition.string.begin.ngspice'
          3: name:'string.quoted.single.ngspice'
          4: name:'punctuation.definition.string.end.ngspice'
          5: patterns: [{ include: '#recursive' }]
      }
      {
        match: '(.*)(\")([^\"]*)(\")(.*)'
        captures:
          1: patterns: [{ include: '#recursive' }]
          2: name:'punctuation.definition.string.begin.ngspice'
          3: name:'string.quoted.double.ngspice'
          4: name:'punctuation.definition.string.end.ngspice'
          5: patterns: [{ include: '#recursive' }]
      }
    ]
  voltage:
    patterns: [
      {
        match: '(v|V)[(]([^(),]+)[,]([^(),]*)[)]'
        captures:
          1: name: 'variable.other.ngspice'
          2: name: 'constant.node.ngspice'
          3: name: 'constant.node.ngspice'
      }
      {
        match: '(v|V)[(]([^(),]+)[)]'
        captures:
          1: name: 'variable.other.ngspice'
          2: name: 'constant.node.ngspice'
      }
    ]
  continue_line:
    match: '^(\\+)(.*)$'
    captures:
      0: name: 'meta.continue_line.ngspice'
      1: name: 'entity.punctuation.plus.ngspice'
      2: patterns: [{ include: '#recursive' }]
  control_block:
    begin: '^(.)(control)'
    beginCaptures:
      1: name: 'entity.punctuation.dot.ngspice.ngspice'
      2: name: 'keyword.ngspice'
    end: '^(.)(endc)'
    endCaptures:
      1: name: 'entity.punctuation.dot.ngspice.ngspice'
      2: name: 'keyword.ngspice'
    name: 'meta.block.control.ngspice'
    patterns:[
      {include: '#recursive'}
    ]
